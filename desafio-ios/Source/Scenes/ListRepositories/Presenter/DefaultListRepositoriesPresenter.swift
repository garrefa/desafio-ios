//
//  DefaultListRepositoriesPresenter.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 08/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import Foundation

fileprivate typealias LocalizedString = R.string.defaultListRepositoriesPresenter

/// Prepares data for presentation in ListRepositoriesViewController
class DefaultListRepositoriesPresenter: ListRepositoriesPresenter {
    
	weak var viewController: ListRepositoriesViewControllerInput!
  
	// MARK: - Presentation logic
    
    func presentRepositories(_ repositories: [Repository], shouldAppend: Bool, hasMore: Bool) {
        let repositoryViewModels = repositories.map { ListRepositories.ViewModel.Repository(repository: $0) }
        if shouldAppend {
            viewController.updateViewModel(with: repositoryViewModels, shouldShowLoadMore: hasMore)
        } else {
            let viewModel = ListRepositories.ViewModel(repositories: repositoryViewModels, shouldShowLoadMore: hasMore)
            viewController.displayViewModel(viewModel)
        }
    }
    
    func presentRequestError(_ error: Error) {
        if let error = error as? RepositoryServiceError, error == .notConnected {
            viewController.presentDismissableAlert(
                title: LocalizedString.presentRequestError_alert_notConnectedErrorTitle(),
                message: LocalizedString.presentRequestError_alert_notConnectedErrorMessage(),
                dismissActionTitle: LocalizedString.presentRequestError_alert_dismissActionTitle()
            )
        } else {
            viewController.presentDismissableAlert(
                title: LocalizedString.presentRequestError_alert_unknownErrorTitle(),
                message: LocalizedString.presentRequestError_alert_unknownErrorMessage(),
                dismissActionTitle: LocalizedString.presentRequestError_alert_dismissActionTitle()
            )
        }
    }
}

extension ListRepositories.ViewModel.Repository {
    
    init(repository: Repository) {
        name = repository.name
        description = repository.description ?? ""
        forks = "\(repository.forksCount)"
        stars = "\(repository.stargazersCount)"
        owner = UserViewModel(user: repository.owner)
    }
}
