//
//  ListRepositoriesViewController.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 08/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

fileprivate typealias LocalizedString = R.string.listRepositoriesViewController

class ListRepositoriesViewController: UITableViewController, ListRepositoriesViewControllerInput {

    var interactor: ListRepositoriesInteractor!
    var router: ListRepositoriesRouter!
    
    fileprivate var viewModel =  ListRepositories.ViewModel.initialState
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // send request to interactor object
    }
    
    // MARK: - Display logic
    
    func displayViewModel(_ viewModel: ListRepositories.ViewModel) {
    
    }
    
    func updateViewModel(with repositories: [ListRepositories.ViewModel.Repository], shouldShowLoadMore: Bool) {
    
    }
}

/// Constants to define the semantics associated to each table view section index
fileprivate struct Section {
    static let repositories = 0
    static let loadMore = 1
}

// MARK: - Table view data source
extension ListRepositoriesViewController {
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return viewModel.shouldShowLoadMore ? 2 : 1 // "load more button" is a cell on the second section
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case Section.repositories:
            return viewModel.repositories.count
        case Section.loadMore:
            return 1
        default:
            debugPrint("Warning: unexpected section index")
            return 0
        }
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case Section.repositories:
            let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.repositoryCell.identifier,
                                                     for: indexPath) as! RepositoryCell
            let repository = viewModel.repositories[indexPath.row]
            cell.load(from: repository)
            return cell
        case Section.loadMore:
            let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.loadMoreCell.identifier,
                                                     for: indexPath)
            cell.textLabel?.text = LocalizedString.loadMoreCell_text()
            return cell
        default:
            debugPrint("Warning: unexpected section index")
            return UITableViewCell()
        }
    }
}

// MARK: - Table view delegate
extension ListRepositoriesViewController {
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case Section.repositories:
            return RepositoryCell.estimatedRowHeight
        case Section.loadMore:
            return 50
        default:
            debugPrint("Warning: unexpected section index")
            return 0
        }
    }
}
