//
//  ListRepositoriesViewController.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 08/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MBProgressHUD

fileprivate typealias LocalizedString = R.string.listRepositoriesViewController

class ListRepositoriesViewController: UITableViewController, ListRepositoriesViewControllerInput {

    // MARK: - Collaborators
    var interactor: ListRepositoriesInteractor!
    var router: ListRepositoriesRouter!
    
    var selectedRepository: Repository?
    fileprivate var viewModel =  ListRepositories.ViewModel.initialState
    fileprivate weak var progressHUD: MBProgressHUD?
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        reloadData()
    }
    
    @IBAction func reloadData() {
        showProgressHUD()
        interactor.reloadRepositories()
    }
    
    // MARK: - Display logic
    
    func displayViewModel(_ viewModel: ListRepositories.ViewModel) {
        DispatchQueue.main.async {
            self._displayViewModel(viewModel)
        }
    }
    
    // private clone of the func above to avoid always referencing self explicitly in each line of the async closure
    private func _displayViewModel(_ viewModel: ListRepositories.ViewModel) {
        self.viewModel = viewModel
        tableView.reloadData()
        hideProgressHUD()
        if viewModel.repositories.count == 0 {
            presentDismissableAlert(title: LocalizedString.displayViewModel_emptyRepositories_alertTitle(),
                                    message: nil,
                                    dismissActionTitle: LocalizedString.displayViewModel_emptyRepositories_alertAction())
        }
    }
    
    func updateViewModel(with repositories: [ListRepositories.ViewModel.Repository], shouldShowLoadMore: Bool) {
        DispatchQueue.main.async {
            self._updateViewModel(with: repositories, shouldShowLoadMore: shouldShowLoadMore)
        }
    }
    
    // private clone of the func above to avoid always referencing self explicitly in each line of the async closure
    private func _updateViewModel(with repositories: [ListRepositories.ViewModel.Repository], shouldShowLoadMore: Bool) {
        if repositories.count > 0 {
            
            // calculate the indexPaths for the tableView animation
            let range = viewModel.repositories.count..<(viewModel.repositories.count+repositories.count)
            let indexPaths = range.map { IndexPath(row: $0, section: Section.repositories) }
            
            // udpate data source
            viewModel.repositories.append(contentsOf: repositories)
            
            // animate row insertion
            tableView.insertRows(at: indexPaths, with: .top)
            
            tableView.scrollToRow(at: indexPaths[0], at: .top, animated: true)
        }
        
        // udpate data source
        viewModel.shouldShowLoadMore = shouldShowLoadMore
        if !shouldShowLoadMore {
            // delete `loadMore` section animated
            tableView.deleteSections([Section.loadMore], with: .automatic)
        }
        
        hideProgressHUD()
    }
    
    override func presentDismissableAlert(title: String?, message: String?, dismissActionTitle: String?) {    
        hideProgressHUD()
        super.presentDismissableAlert(title: title, message: message, dismissActionTitle: dismissActionTitle)
    }
    
    // MARK: - Helper functions
    
    fileprivate func showProgressHUD() {
        progressHUD = MBProgressHUD.showAdded(to: navigationController?.view ?? view, animated: true)
        progressHUD?.label.text = LocalizedString.progressHUD_description_loading()
    }
    
    fileprivate func hideProgressHUD() {
        progressHUD?.hide(animated: true)
    }

}

/// Constants to define the semantics associated to each table view section index
fileprivate struct Section {
    static let repositories = 0
    static let loadMore = 1
}

// MARK: - Table view data source
extension ListRepositoriesViewController {
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return viewModel.shouldShowLoadMore ? 2 : 1 // "load more button" is a cell on the second section
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case Section.repositories:
            return viewModel.repositories.count
        case Section.loadMore:
            return 1
        default:
            debugPrint("Warning: unexpected section index")
            return 0
        }
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case Section.repositories:
            let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.repositoryCell.identifier,
                                                     for: indexPath) as! RepositoryCell
            let repository = viewModel.repositories[indexPath.row]
            cell.load(from: repository)
            return cell
        case Section.loadMore:
            let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.loadMoreCell.identifier,
                                                     for: indexPath)
            cell.textLabel?.text = LocalizedString.loadMoreCell_text()
            return cell
        default:
            debugPrint("Warning: unexpected section index")
            return UITableViewCell()
        }
    }
}

// MARK: - Table view delegate
extension ListRepositoriesViewController {
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case Section.repositories:
            return RepositoryCell.estimatedRowHeight
        case Section.loadMore:
            return 50
        default:
            debugPrint("Warning: unexpected section index")
            return 0
        }
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        tableView.deselectRow(at: indexPath, animated: true)
        
        switch indexPath.section {
        case Section.repositories:
            selectedRepository = interactor.repositories[indexPath.row]
            router.showPullRequests()
        case Section.loadMore:
            showProgressHUD()
            interactor.loadMoreRepositories()
        default:
            debugPrint("Warning: unexpected section index")
        }
    }
}
