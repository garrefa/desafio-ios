//
//  DefaultListRepositoriesInteractor.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 08/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import Foundation

/// Implements the business logic behind the events that come from ListRepositoriesViewController
class DefaultListRepositoriesInteractor: ListRepositoriesInteractor {

    var presenter: ListRepositoriesPresenter!
    private(set) var repositories: [Repository] = []
    
    private let repositoryService: RepositoryService
    
    private var nextPage: UInt = 0
    
    init(repositoryService: RepositoryService) {
        self.repositoryService = repositoryService
    }
    
    // MARK: - Business logic
    
    func reloadRepositories() {
        nextPage = 0
        requestNextPageOfRepositories(shouldAppendResults: false)
    }
    
    private func requestNextPageOfRepositories(shouldAppendResults: Bool) {
        repositoryService.findRepositories(
            language: .java,
            sortBy: SortMethod<RepositoriesSortKey>(key: .stars, direction: .descending),
            page: nextPage,
            onCompletion: { repositories, hasMorePages in
                self.nextPage += 1
                if shouldAppendResults {
                    self.repositories.append(contentsOf: repositories)
                } else {
                    self.repositories = repositories
                }
                self.presenter.presentRepositories(repositories, shouldAppend: shouldAppendResults, hasMore: hasMorePages)
            },
            onError: { error in
                self.presenter.presentRequestError(error)
            }
        )
    }
    
    func loadMoreRepositories() {
        guard nextPage > 0 else {
            debugPrint("Warning: trying to load more repos when `nextPage` is 0.")
            reloadRepositories()
            return
        }
        
        requestNextPageOfRepositories(shouldAppendResults: true)
    }
}
