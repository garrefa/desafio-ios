//
//  DefaultListPullRequestsPresenter.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 09/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import Foundation
import UIKit

fileprivate typealias LocalizedString = R.string.defaultListPullRequestsPresenter

/// Prepares data for presentation in ListPullRequestsViewController
class DefaultListPullRequestsPresenter: ListPullRequestsPresenter {
    
	weak var viewController: ListPullRequestsViewControllerInput!
    
    static let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        formatter.doesRelativeDateFormatting = true
        return formatter
    }()
  
	// MARK: - Presentation logic
    
    func presentPullRequestsCount(_ count: PullRequestsCountResult) {
        let defaultColor = UIColor.darkGray
        let text: NSMutableAttributedString
        let fullText: String
        
        switch count {
        case .success(let openCount, let closedCount):
            let textOpen = LocalizedString.presentPullRequestsCount_success_open(String(openCount))
            let textClosed = LocalizedString.presentPullRequestsCount_success_closed(String(closedCount))
            fullText = "\(textOpen) / \(textClosed)"
            text = NSMutableAttributedString(string: fullText)
            
            // configure default text color
            text.addAttribute(NSForegroundColorAttributeName, value: defaultColor, range: NSMakeRange(0, fullText.characters.count))
            
            // configure text color for the "open" part
            let openColor = UIColor(colorLiteralRed: 223.0/255.0, green: 147/255.0, blue: 5/255.0, alpha: 1)
            text.addAttribute(NSForegroundColorAttributeName, value: openColor, range: NSMakeRange(0, textOpen.characters.count))
        case .error:
            fullText = LocalizedString.presentPullRequestsCount_error_message()
            text = NSMutableAttributedString(string: fullText)
            // configure default text color
            text.addAttribute(NSForegroundColorAttributeName, value: defaultColor, range: NSMakeRange(0, fullText.characters.count))
        }
        
        
        text.addAttribute(NSFontAttributeName,
                          value: UIFont.boldSystemFont(ofSize: 14),
                          range: NSMakeRange(0, fullText.characters.count))
        
        viewController.displayPullRequestsCountText(text)
    }
    
    func presentPullRequests(_ pullRequests: [PullRequest], shouldAppend: Bool, hasMore: Bool) {
        let pullRequestViewModels = pullRequests.map { ListPullRequests.ViewModel.PullRequest(pullRequest: $0) }
        if shouldAppend {
            viewController.updateViewModel(with: pullRequestViewModels, shouldShowLoadMore: hasMore)
        } else {
            let viewModel = ListPullRequests.ViewModel(pullRequests: pullRequestViewModels, shouldShowLoadMore: hasMore)
            viewController.displayViewModel(viewModel)
        }
    }
    
    func presentRequestError(_ error: Error) {
        if let error = error as? RepositoryServiceError, error == .notConnected {
            viewController.presentDismissableAlert(
                title: LocalizedString.presentRequestError_alert_notConnectedErrorTitle(),
                message: LocalizedString.presentRequestError_alert_notConnectedErrorMessage(),
                dismissActionTitle: LocalizedString.presentRequestError_alert_dismissActionTitle()
            )
        } else {
            viewController.presentDismissableAlert(
                title: LocalizedString.presentRequestError_alert_unknownErrorTitle(),
                message: LocalizedString.presentRequestError_alert_unknownErrorMessage(),
                dismissActionTitle: LocalizedString.presentRequestError_alert_dismissActionTitle()
            )
        }
    }
}

extension ListPullRequests.ViewModel.PullRequest {
    init(pullRequest: PullRequest) {
        title = pullRequest.title
        description = pullRequest.body ?? LocalizedString.pullRequest_viewModel_emptyDescription()
        author = UserViewModel(user: pullRequest.author)
        let dateText = DefaultListPullRequestsPresenter.dateFormatter.string(from: pullRequest.createdAt)
        dateInfo = LocalizedString.pullRequest_viewModel_dateInfo(dateText)
    }
}
