//
//  ListPullRequestsViewController.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 09/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class ListPullRequestsViewController: UITableViewController, ListPullRequestsViewControllerInput {

    var interactor: ListPullRequestsInteractor!
    var router: ListPullRequestsRouter!
    
    var repository: Repository! // the repository for which we'll retrieve the pull requests
    
    fileprivate var viewModel = ListPullRequests.ViewModel.initialState
    
    // MARK: - View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        title = repository.name
    }
    
    // MARK: - Display logic
}

/// Constants to define the semantics associated to each table view section index
fileprivate struct Section {
    static let repositories = 0
    static let loadMore = 1
}

// MARK: - Table view data source
extension ListPullRequestsViewController {
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return viewModel.shouldShowLoadMore ? 2 : 1 // "load more button" is a cell on the second section
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case Section.repositories:
            return viewModel.pullRequests.count
        case Section.loadMore:
            return 1
        default:
            debugPrint("Warning: unexpected section index")
            return 0
        }
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case Section.repositories:
            let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.repositoryCell.identifier,
                                                     for: indexPath) as! RepositoryCell
            _ = viewModel.pullRequests[indexPath.row]
            //cell.load(from: repository)
            return cell
        case Section.loadMore:
            let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.loadMoreCell.identifier,
                                                     for: indexPath)
            //cell.textLabel?.text = LocalizedString.loadMoreCell_text()
            return cell
        default:
            debugPrint("Warning: unexpected section index")
            return UITableViewCell()
        }
    }
}

// MARK: - Table view delegate
extension ListPullRequestsViewController {
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case Section.repositories:
            return RepositoryCell.estimatedRowHeight
        case Section.loadMore:
            return 50
        default:
            debugPrint("Warning: unexpected section index")
            return 0
        }
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        tableView.deselectRow(at: indexPath, animated: true)
        
//        switch indexPath.section {
//        case Section.repositories:
//            selectedRepository = interactor.repositories[indexPath.row]
//            router.showPullRequests()
//        case Section.loadMore:
//            showProgressHUD()
//            interactor.loadMoreRepositories()
//        default:
//            debugPrint("Warning: unexpected section index")
//        }
    }
}

