//
//  ListPullRequestsViewController.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 09/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MBProgressHUD

fileprivate typealias LocalizedString = R.string.listPullRequestsViewController

class ListPullRequestsViewController: UITableViewController, ListPullRequestsViewControllerInput {

    var interactor: ListPullRequestsInteractor!
    var router: ListPullRequestsRouter!
    
    // the repository for which we'll retrieve the pull requests
    var repository: Repository! {
        didSet {
            interactor.repository = repository
        }
    }
    
    // the selected pull request, so the router knows what to do
    var selectedPullRequest: PullRequest?
    
    fileprivate var viewModel = ListPullRequests.ViewModel.initialState
    fileprivate weak var progressHUD: MBProgressHUD?
    fileprivate let tableHeader: PullRequestsTableHeader = {
        return R.nib.pullRequestsTableHeader().instantiate(withOwner: nil, options: .none)[0] as! PullRequestsTableHeader
    }()
    
    // MARK: - View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        title = repository.name
        reloadData()
    }
    
    fileprivate func reloadData() {
        tableHeader.activityIndicator.startAnimating()
        showProgressHUD()
        interactor.reloadPullRequests()
    }
    
    // MARK: - Display logic
    
    func displayPullRequestsCountText(_ text: NSAttributedString) {
        DispatchQueue.main.async {
            self.tableHeader.attributedText = text
        }
    }
    
    func displayViewModel(_ viewModel: ListPullRequests.ViewModel) {
        DispatchQueue.main.async {
            self._displayViewModel(viewModel)
        }
    }
    
    // private clone of the func above to avoid always referencing self explicitly in each line of the async closure
    private func _displayViewModel(_ viewModel: ListPullRequests.ViewModel) {
        self.viewModel = viewModel
        tableView.reloadData()
        hideProgressHUD()
        if viewModel.pullRequests.count == 0 {
            presentDismissableAlert(title: LocalizedString.displayViewModel_emptyPullRequests_alertTitle(),
                                    message: nil,
                                    dismissActionTitle: LocalizedString.displayViewModel_emptyPullRequests_alertAction())
        }
    }
    
    func updateViewModel(with pullRequests: [ListPullRequests.ViewModel.PullRequest], shouldShowLoadMore: Bool) {
        DispatchQueue.main.async {
            self._updateViewModel(with: pullRequests, shouldShowLoadMore: shouldShowLoadMore)
        }
    }
    
    // private clone of the func above to avoid always referencing self explicitly in each line of the async closure
    private func _updateViewModel(with pullRequests: [ListPullRequests.ViewModel.PullRequest], shouldShowLoadMore: Bool) {
        if pullRequests.count > 0 {
            
            // calculate the indexPaths for the tableView animation
            let range = viewModel.pullRequests.count..<(viewModel.pullRequests.count + pullRequests.count)
            let indexPaths = range.map { IndexPath(row: $0, section: Section.pullRequests) }
            
            // udpate data source
            viewModel.pullRequests.append(contentsOf: pullRequests)
            
            // animate row insertion
            tableView.insertRows(at: indexPaths, with: .top)
            
            tableView.scrollToRow(at: indexPaths[0], at: .top, animated: true)
        }
        
        // udpate data source
        viewModel.shouldShowLoadMore = shouldShowLoadMore
        if !shouldShowLoadMore {
            // delete `loadMore` section animated
            tableView.deleteSections([Section.loadMore], with: .automatic)
        }
        
        hideProgressHUD()
    }
    
    // MARK: - Helper functions
    
    fileprivate func showProgressHUD() {
        progressHUD = MBProgressHUD.showAdded(to: navigationController?.view ?? view, animated: true)
        progressHUD?.label.text = LocalizedString.progressHUD_description_loading()
    }
    
    fileprivate func hideProgressHUD() {
        progressHUD?.hide(animated: true)
    }
}

/// Constants to define the semantics associated to each table view section index
fileprivate struct Section {
    static let pullRequests = 0
    static let loadMore = 1
}

// MARK: - Table view data source
extension ListPullRequestsViewController {
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return viewModel.shouldShowLoadMore ? 2 : 1 // "load more button" is a cell on the second section
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case Section.pullRequests:
            return viewModel.pullRequests.count
        case Section.loadMore:
            return 1
        default:
            debugPrint("Warning: unexpected section index")
            return 0
        }
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case Section.pullRequests:
            let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.pullRequestCell.identifier,
                                                     for: indexPath) as! PullRequestCell
            let pullRequest = viewModel.pullRequests[indexPath.row]
            cell.load(from: pullRequest)
            return cell
        case Section.loadMore:
            let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.loadMoreCell.identifier,
                                                     for: indexPath)
            cell.textLabel?.text = LocalizedString.loadMoreCell_text()
            return cell
        default:
            debugPrint("Warning: unexpected section index")
            return UITableViewCell()
        }
    }
}

// MARK: - Table view delegate
extension ListPullRequestsViewController {
    
    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        guard section == Section.pullRequests else {
            return nil
        }
        return tableHeader
    }
    
    override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        guard section == Section.pullRequests else {
            return 0
        }
        return PullRequestsTableHeader.estimatedHeight
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case Section.pullRequests:
            return PullRequestCell.estimatedRowHeight
        case Section.loadMore:
            return 50
        default:
            debugPrint("Warning: unexpected section index")
            return 0
        }
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        tableView.deselectRow(at: indexPath, animated: true)
        
        switch indexPath.section {
        case Section.pullRequests:
            selectedPullRequest = interactor.pullRequests[indexPath.row]
            router.showPullRequestDetail()
        case Section.loadMore:
            showProgressHUD()
            interactor.loadMorePullRequests()
        default:
            debugPrint("Warning: unexpected section index")
        }
    }
}

