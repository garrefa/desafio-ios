//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Info.plist`.
    static let infoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Info", withExtension: "plist")`
    static func infoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `github`.
    static let github = Rswift.ImageResource(bundle: R.hostingBundle, name: "github")
    /// Image `icSetaEsq`.
    static let icSetaEsq = Rswift.ImageResource(bundle: R.hostingBundle, name: "icSetaEsq")
    /// Image `ic_fork`.
    static let ic_fork = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fork")
    /// Image `ic_star`.
    static let ic_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star")
    /// Image `ic_userPlaceholder`.
    static let ic_userPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_userPlaceholder")
    
    /// `UIImage(named: "github", bundle: ..., traitCollection: ...)`
    static func github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.github, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icSetaEsq", bundle: ..., traitCollection: ...)`
    static func icSetaEsq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icSetaEsq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fork", bundle: ..., traitCollection: ...)`
    static func ic_fork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fork, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star", bundle: ..., traitCollection: ...)`
    static func ic_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_userPlaceholder", bundle: ..., traitCollection: ...)`
    static func ic_userPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_userPlaceholder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `pullRequestCell`.
    static let pullRequestCell: Rswift.ReuseIdentifier<PullRequestTableViewCell> = Rswift.ReuseIdentifier(identifier: "pullRequestCell")
    /// Reuse identifier `repositoryCell`.
    static let repositoryCell: Rswift.ReuseIdentifier<RepositoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "repositoryCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `RepositoryListViewController`, and contains static references to 1 segues.
    struct repositoryListViewController {
      /// Segue identifier `pullRequests`.
      static let pullRequests: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RepositoryListViewController, PullRequestsOfARepositoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "pullRequests")
      
      /// Optionally returns a typed version of segue `pullRequests`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pullRequests(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RepositoryListViewController, PullRequestsOfARepositoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.repositoryListViewController.pullRequests, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "github") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'github' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let pullRequestsOfARepositoryViewController = StoryboardViewControllerResource<PullRequestsOfARepositoryViewController>(identifier: "PullRequestsOfARepositoryViewController")
      let repositoryListViewController = StoryboardViewControllerResource<RepositoryListViewController>(identifier: "RepositoryListViewController")
      
      func pullRequestsOfARepositoryViewController(_: Void = ()) -> PullRequestsOfARepositoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pullRequestsOfARepositoryViewController)
      }
      
      func repositoryListViewController(_: Void = ()) -> RepositoryListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: repositoryListViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_fork") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_fork' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_userPlaceholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_userPlaceholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icSetaEsq") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icSetaEsq' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_star' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().repositoryListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'repositoryListViewController' could not be loaded from storyboard 'Main' as 'RepositoryListViewController'.") }
        if _R.storyboard.main().pullRequestsOfARepositoryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pullRequestsOfARepositoryViewController' could not be loaded from storyboard 'Main' as 'PullRequestsOfARepositoryViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}