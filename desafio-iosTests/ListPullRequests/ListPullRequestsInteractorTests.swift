//
//  ListPullRequestsInteractorTests.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 09/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import desafio_ios
import XCTest

class ListPullRequestsInteractorTests: XCTestCase {

    // MARK: - Subject under test
    
    var interactor: DefaultListPullRequestsInteractor!

    // MARK: - Test doubles
    
    var repositoryServiceMock: RepositoryServiceMock!
    var presenterMock: ListPullRequestsPresenterMock!

    
    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        repositoryServiceMock = RepositoryServiceMock()
        presenterMock = ListPullRequestsPresenterMock()
        interactor = DefaultListPullRequestsInteractor(repositoryService: repositoryServiceMock)
        interactor.presenter = presenterMock
        interactor.repository =  Repository.fromExampleJSON()
    }
    
    // MARK: - Tests
    
    func testPullRequestsPropertyUpdate() {
        // Config repositoryServiceMock to answer what we need
        let expected = (pullRequests: [PullRequest.fromExampleJSON()], hasMorePages: true)
        repositoryServiceMock.pullRequests_expectedResult = expected
        
        interactor.reloadPullRequests()
        
        XCTAssert(interactor.pullRequests == expected.pullRequests,
                  "interactor.pullRequests were not updated correctly after `reloadPullRequests`")
        
        interactor.loadMorePullRequests()
        XCTAssert(interactor.pullRequests == (expected.pullRequests + expected.pullRequests),
                  "interactor.pullRequests were not updated correctly after `loadMorePullRequests`")
    }
    
    func testReloadPullRequests_forwardsResultsToPresenter() {
        let expected = (pullRequests: [PullRequest.fromExampleJSON()], hasMorePages: true)
        repositoryServiceMock.pullRequests_expectedResult = expected
        
        interactor.reloadPullRequests()
        
        guard let result = presenterMock.latest_presentPullRequests_result else {
            XCTFail("presenter was not requested to present pull requests")
            return
        }
        
        XCTAssert(result.pullRequests == expected.pullRequests
            && result.hasMore == expected.hasMorePages
            && result.shouldAppend == false,
                  "presenter received unexpected values for presenting the pull requests")
    }
    
    func testReloadPullRequests_forwardsErrorToPresenter() {
        repositoryServiceMock.pullRequests_shouldFail = true
        interactor.reloadPullRequests()
        XCTAssertNotNil(presenterMock.latestRequestError, "presenter should have been asked to present a request error")
    }
    
    func testReloadPullRequests_requestsPullRequestStats() {
        interactor.reloadPullRequests()
        
        sleep(1) // the line above runs asynchronous code in another queue, reason why we'll wait a little here
        
        XCTAssert(
            repositoryServiceMock.pullRequestsCount_wasCalledForOpenPRs
            && repositoryServiceMock.pullRequestsCount_wasCalledForClosedPRs,
            "repository service didn't receive the expected requests"
        )
    }
    
    func testReloadPullRequests_presentsPullRequestStats() {
        
        repositoryServiceMock.expected_openPRsCount = 1
        repositoryServiceMock.expected_closedPRsCount = 2
        
        interactor.reloadPullRequests()
        
        sleep(1) // the line above runs asynchronous code in another queue, reason why we'll wait a little here
        
        guard let latestPullRequestsCountResult = presenterMock.latestPullRequestsCountResult else {
            XCTFail("presenter was not requested to present PR stats")
            return
        }
        
        switch latestPullRequestsCountResult {
        case .success(let openCount, let closedCount):
            XCTAssert(
                openCount == repositoryServiceMock.expected_openPRsCount
                && closedCount == repositoryServiceMock.expected_closedPRsCount,
                "Presented received unexpected open/closed PRs count"
            )
        default:
            XCTFail("Unexpected PullRequestsCountResult")
        }
    }
    
    func testReloadPullRequests_presentPullRequestStatsFailure() {
        
        repositoryServiceMock.pullRequestsCount_shouldFailForClosedPRs = true // let's fail only 1 request
        repositoryServiceMock.expected_openPRsCount = 2
        
        interactor.reloadPullRequests()
        
        sleep(1) // the line above runs asynchronous code in another queue, reason why we'll wait a little here
        
        if case .success(_, _) = presenterMock.latestPullRequestsCountResult! {
            XCTFail("Unexpected PullRequestsCountResult")
        }
    }
    
    func testLoadMorePullRequests_forwardsResultsToPresenter() {
        repositoryServiceMock.pullRequests_expectedResult = (pullRequests: [], hasMorePages: true)
        interactor.reloadPullRequests()
        
        let expectedResult = (pullRequests: [PullRequest.fromExampleJSON()], hasMorePages: false)
        repositoryServiceMock.pullRequests_expectedResult = expectedResult
        interactor.loadMorePullRequests()
        
        guard let result = presenterMock.latest_presentPullRequests_result else {
            XCTFail("presenter was not requested to present pull requests")
            return
        }
        
        XCTAssert(result.pullRequests == expectedResult.pullRequests
            && result.hasMore == expectedResult.hasMorePages
            && result.shouldAppend == true,
                  "presenter received unexpected values for presenting the pull requests")
    }
}
