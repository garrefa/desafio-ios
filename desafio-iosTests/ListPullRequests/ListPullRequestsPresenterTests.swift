//
//  ListPullRequestsPresenterTests.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 09/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import desafio_ios
import XCTest


class ListPullRequestsPresenterTests: XCTestCase {

    // MARK: - Subject under test
    
    var presenter: DefaultListPullRequestsPresenter!

    // MARK: - Test doubles
    
    var viewControllerMock: ListPullRequestsViewControllerMock!
    
    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        viewControllerMock = ListPullRequestsViewControllerMock()
        presenter = DefaultListPullRequestsPresenter()
        presenter.viewController = viewControllerMock
    }
    
    // MARK: - Tests
    
    func testPresentPullRequestsCount_successSendsTextToViewController() {
        presenter.presentPullRequestsCount(.success(openCount: 0, closedCount: 1))
        XCTAssertNotNil(viewControllerMock.displayPullRequestsCountText_latestText)
        XCTAssertFalse(viewControllerMock.displayPullRequestsCountText_latestText!.string.isEmpty)
        
    }
    
    func testPresentPullRequestsCount_failureSendsTextToViewController() {
        presenter.presentPullRequestsCount(.error)
        XCTAssertNotNil(viewControllerMock.displayPullRequestsCountText_latestText)
        XCTAssertFalse(viewControllerMock.displayPullRequestsCountText_latestText!.string.isEmpty)
    }
    
    func testPresentPullRequests_dontAppend() {
        let pullRequests = [PullRequest.example()]
        let hasMore = true
        presenter.presentPullRequests(pullRequests, shouldAppend: false, hasMore: hasMore)
        if let viewModel = viewControllerMock.viewModelDisplayed {
            XCTAssert(viewModel.pullRequests.count == pullRequests.count && viewModel.shouldShowLoadMore == hasMore,
                      "View Controller received an unexpected view model")
        } else {
            XCTFail("presentPullRequests with shouldAppend = false should cause a new viewModel to be displayed")
        }
    }
    
    func testPresentPullRequests_appending() {
        let pullRequests = [PullRequest.example()]
        let hasMore = true
        presenter.presentPullRequests(pullRequests, shouldAppend: true, hasMore: hasMore)
        if let result = viewControllerMock.updateViewModel_result {
            XCTAssert(result.pullRequests.count == pullRequests.count && result.shouldShowLoadMore == hasMore,
                      "View Controller received unexpected values from presenter")
        } else {
            XCTFail("presentPullRequests with shouldAppend = true should cause a new viewModel to be displayed")
        }
    }
    
    func testPresentRequestError() {
        presenter.presentRequestError(anyError())
        XCTAssert(viewControllerMock.didPresentAlert,
                  "viewController should have presented an alert notifying the user about the error")
    }
}
