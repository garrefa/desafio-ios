//
//  ListRepositoriesInteractorTests.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 08/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import desafio_ios
import XCTest

class ListRepositoriesInteractorTests: XCTestCase {

    // MARK: - Subject under test
    
    var interactor: DefaultListRepositoriesInteractor!

    // MARK: - Test doubles
    
    var repositoryServiceMock: RepositoryServiceMock!
    var presenterMock: ListRepositoriesPresenterMock!

    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        repositoryServiceMock = RepositoryServiceMock()
        interactor = DefaultListRepositoriesInteractor(repositoryService: repositoryServiceMock)
        presenterMock = ListRepositoriesPresenterMock()
        interactor.presenter = presenterMock
    }
    
    // MARK: - Tests
    
    func testSearchParameters_onLoadInitialRepositories() {
        interactor.loadInitialRepositories()
        verifySearchParameters()
    }
    
    private func verifySearchParameters() {
        
        guard let latestSearchParameters = repositoryServiceMock.latestSearchParameters else {
            XCTFail("latestSearchParameters is nil, so `findRepositories` was not called on the repository service")
            return
        }
        XCTAssert(latestSearchParameters.language == .java, "interactor should be searching for java repositories")
        
        guard let sortMethod = latestSearchParameters.sortMethod else {
            XCTFail("interactor should have passed a sort method to the seach")
            return
        }
        XCTAssert(sortMethod.key == .stars && sortMethod.direction == .descending,
                  "interactor should have requested repositories sorted by stars, descending")
    }
    
    func testSearchParameters_onLoadMoreRepositories() {
        interactor.loadMoreRepositories()
        verifySearchParameters()
    }
    
    func testPageIndex_whenFindRepositoriesSucceeds() {
        interactor.loadInitialRepositories()
        XCTAssert(repositoryServiceMock.latestSearchParameters.page == 0,
                  "Unxpected page index on when loading the initial repositories")
        interactor.loadMoreRepositories()
        XCTAssert(repositoryServiceMock.latestSearchParameters.page == 1,
                  "Unxpected page index on when loading more repositories")
    }
    
    func testPageIndex_whenFindRepositoriesFails() {
        interactor.loadInitialRepositories()
        repositoryServiceMock.findRepositoriesShouldFail = true
        interactor.loadMoreRepositories()
        interactor.loadMoreRepositories()
        XCTAssert(repositoryServiceMock.latestSearchParameters.page == 1,
                  "Unxpected page index on after repository service fails on `findRepositories`")
    }
    
    func testResultForwarding_onLoadInitialRepositories() {
        // Config repositoryServiceMock to answer what we need
        let expected = (repositories: [Repository.fake()], hasMorePages: true)
        repositoryServiceMock.findRepositoriesExpectedResult = expected
        
        interactor.loadInitialRepositories()
        
        // Assert that presenter has received the data accordingly
        guard let latestDataReceivedOnPresentRepositories = presenterMock.latestDataReceivedOnPresentRepositories else {
            XCTFail("`reloadRepositories` was not called on the presenter")
            return
        }
        XCTAssert(latestDataReceivedOnPresentRepositories.repositories == expected.repositories,
                  "Unexpected repositories were passed to the presenter")
        XCTAssert(latestDataReceivedOnPresentRepositories.hasMore == expected.hasMorePages,
                  "An unexpected value of `hasMore` was passed to the presenter")
        XCTAssertFalse(latestDataReceivedOnPresentRepositories.shouldAppend,
                       "Presenter should not append the data received here")
    }
    
    func testFailureForwarding_onLoadInitialRepositories() {
        repositoryServiceMock.findRepositoriesShouldFail = true
        interactor.loadInitialRepositories()
        XCTAssert(presenterMock.presentRequestErrorWasCalled, "presenter should have been requested to present an error")
    }
    
    func testResultForwarding_onLoadMoreRepositories() {
        
        interactor.loadInitialRepositories()
        
        // Config repositoryServiceMock to answer what we need
        let expected = (repositories: [Repository.fake()], hasMorePages: true)
        repositoryServiceMock.findRepositoriesExpectedResult = expected
        
        interactor.loadMoreRepositories()
        
        // Assert that presenter has received the data accordingly
        guard let latestDataReceivedOnPresentRepositories = presenterMock.latestDataReceivedOnPresentRepositories else {
            XCTFail("`reloadRepositories` was not called on the presenter")
            return
        }
        XCTAssert(latestDataReceivedOnPresentRepositories.repositories == expected.repositories,
                  "Unexpected repositories were passed to the presenter")
        XCTAssert(latestDataReceivedOnPresentRepositories.hasMore == expected.hasMorePages,
                  "An unexpected value of `hasMore` was passed to the presenter")
        XCTAssert(latestDataReceivedOnPresentRepositories.shouldAppend,
                  "Presenter should append the data received here")
    }
    
    func testFailureForwarding_onLoadMoreRepositories() {
        interactor.loadInitialRepositories()
        repositoryServiceMock.findRepositoriesShouldFail = true
        interactor.loadMoreRepositories()
        XCTAssert(presenterMock.presentRequestErrorWasCalled, "presenter should have been requested to present an error")
    }
    
}
