//
//  ListRepositoriesInteractorTests.swift
//  desafio-ios
//
//  Created by Cicero Camargo on 08/04/17.
//  Copyright (c) 2017 Stationfy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import desafio_ios
import XCTest

class RepositoryServiceMock: RepositoryService {

    var findRepositoriesExpectedResult: (repositories: [Repository], hasMorePages: Bool) = ([], false)
    var latestSearchParameters: (language: ProgrammingLanguage, sortMethod: SortMethod?, page: UInt)!
    var findRepositoriesShouldFail = false
    func findRepositories(language: ProgrammingLanguage,
                          sortBy sortMethod: SortMethod?,
                          page: UInt,
                          onCompletion completionBlock: ([Repository], Bool) -> Void,
                          onError errorBlock: (Error) -> Void) {
        latestSearchParameters = (language: language, sortMethod: sortMethod, page: page)
        if findRepositoriesShouldFail {
            errorBlock(NSError(domain: "", code: 0, userInfo: .none))
        } else {
            completionBlock(findRepositoriesExpectedResult.repositories, findRepositoriesExpectedResult.hasMorePages)
        }
    }
}

class ListRepositoriesInteractorTests: XCTestCase {

    // MARK: - Subject under test
    
    var interactor: DefaultListRepositoriesInteractor!

    // MARK: - Test doubles
    var repositoryServiceMock: RepositoryServiceMock!

    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        repositoryServiceMock = RepositoryServiceMock()
        interactor = DefaultListRepositoriesInteractor(repositoryService: repositoryServiceMock)
    }
    
    // MARK: - Tests
    
    func testSearchParameters_onLoadInitialRepositories() {
        interactor.loadInitialRepositories()
        verifySearchParameters()
    }
    
    private func verifySearchParameters() {
        
        guard let latestSearchParameters = repositoryServiceMock.latestSearchParameters else {
            XCTFail("latestSearchParameters is nil, so `findRepositories` was not called on the repository service")
            return
        }
        XCTAssert(latestSearchParameters.language == .java, "interactor should be searching for java repositories")
        
        guard let sortMethod = latestSearchParameters.sortMethod else {
            XCTFail("interactor should have passed a sort method to the seach")
            return
        }
        XCTAssert(sortMethod.key == .stars && sortMethod.direction == .descending,
                  "interactor should have requested repositories sorted by stars, descending")
    }
    
    func testSearchParameters_onLoadMoreRepositories() {
        interactor.loadMoreRepositories()
        verifySearchParameters()
    }
    
    func testPageIndex_whenFindRepositoriesSucceeds() {
        interactor.loadInitialRepositories()
        XCTAssert(repositoryServiceMock.latestSearchParameters.page == 0,
                  "Unxpected page index on when loading the initial repositories")
        interactor.loadMoreRepositories()
        XCTAssert(repositoryServiceMock.latestSearchParameters.page == 1,
                  "Unxpected page index on when loading more repositories")
    }
    
    func testPageIndex_whenFindRepositoriesFails() {
        interactor.loadInitialRepositories()
        repositoryServiceMock.findRepositoriesShouldFail = true
        interactor.loadMoreRepositories()
        interactor.loadMoreRepositories()
        XCTAssert(repositoryServiceMock.latestSearchParameters.page == 1,
                  "Unxpected page index on after repository service fails on `findRepositories`")
    }
}
